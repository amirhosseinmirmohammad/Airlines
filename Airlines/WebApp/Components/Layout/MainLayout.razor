@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject HttpClient httpClient

<MudRTLProvider RightToLeft="@_rightToLeft">
    <MudThemeProvider Theme="@MyCustomTheme" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudAppBar Color="Color.Primary" Fixed="false" Dense="@dense" Elevation="@elevation">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        My Application
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <MyNavMenu />
    </MudDrawer>
    <MudLayout>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudLayout>
</MudRTLProvider>

@code {
    private bool _rightToLeft = true;
    private bool _drawerOpen = true;
    private int elevation = 4;
    private bool dense = false;
    private bool _isTokenLoaded = false;
    private const string DefaultToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6ImZlZDQ1YTQ2LTE3NzYtNDI4ZC04M2U4LTgzNWJiYjhjN2MwZiIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWUiOiJBbWlyIEhvc3NlaW4gTWlyIE1vaGFtbWFkIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvZW1haWxhZGRyZXNzIjoiYW1pcmhvc3NlaW5taXJtb2hhbW1hZEBnbWFpbC5jb20iLCJleHAiOjE3NDA4NzQ3NjEsImlzcyI6IllvdXJJc3N1ZXIiLCJhdWQiOiJNYWhhbkFpcmxpbmVzIn0.lz2Ptda7D4eiFRApSc0U9ZePluQEqTjcpJ8jm3T5MHI";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isTokenLoaded)
        {
            await EnsureTokenIsSet();
            _isTokenLoaded = true;
            StateHasChanged(); 
        }
    }

    private async Task EnsureTokenIsSet()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");

        if (string.IsNullOrEmpty(token))
        {
            Console.WriteLine("⚠ Token not found. Setting default token...");
            await LocalStorage.SetItemAsync("authToken", DefaultToken);
        }

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", DefaultToken);
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            Typography = new Typography()
            {
                Default = new DefaultTypography()
                {
                    FontFamily = new[] { "iransans" }
                }
            }
        };
}
