@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inherits LayoutComponentBase

<MudRTLProvider RightToLeft="@_rightToLeft">
    <MudThemeProvider Theme="@MyCustomTheme" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudAppBar Color="Color.Primary" Fixed="false" Dense="@dense" Elevation="@elevation">
        <MudText>خوش آمدید، @UserName</MudText>
        <MudButton OnClick="Logout">خروج</MudButton>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        My Application
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <MyNavMenu />
    </MudDrawer>
    <MudLayout>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @if (!_isCheckingAuth)
            {
                @Body
            }
            else
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            }
        </MudContainer>
    </MudLayout>
</MudRTLProvider>

@code {
    private bool _rightToLeft = true;
    private bool _drawerOpen = true;
    private int elevation = 4;
    private bool dense = false;
    private string UserName { get; set; } = "کاربر مهمان";
    private bool _isCheckingAuth = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Navigation.LocationChanged += async (sender, args) => await CheckAuthenticationAsync(); // بررسی لاگین هنگام تغییر صفحه
            await CheckAuthenticationAsync();
            _isCheckingAuth = false;
            StateHasChanged();
        }
    }

    private async Task CheckAuthenticationAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");

        if (string.IsNullOrEmpty(token))
        {
            if (!Navigation.Uri.Contains("login")) // جلوگیری از لوپ بی‌نهایت در صفحه لاگین
            {
                Navigation.NavigateTo("/login");
            }
        }
        else
        {
            await LoadUserAsync();
        }
    }

    public async Task LoadUserAsync()
    {
        var newUserName = await LocalStorage.GetItemAsync<string>("userName") ?? "کاربر مهمان";
        if (newUserName != UserName) // فقط اگر مقدار تغییر کند، UI را آپدیت کن
        {
            UserName = newUserName;
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await LocalStorage.RemoveItemAsync("userName");

        UserName = "کاربر مهمان";
        StateHasChanged();

        Navigation.NavigateTo("/login");
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            Typography = new Typography()
            {
                Default = new DefaultTypography()
                {
                    FontFamily = new[] { "iransans" }
                }
            }
        };
}
